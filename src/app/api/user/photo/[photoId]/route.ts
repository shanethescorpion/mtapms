'use server'

import mongodbConnect from '@app/lib/db'
import FileDocument from '@app/models/FileDocument'
import { isObjectIdOrHexString } from 'mongoose'
import { NextRequest, NextResponse } from 'next/server'

type PhotoParamProps = {
  params: {
    photoId: string
  }
}

export async function GET(request: NextRequest, { params: { photoId }}: PhotoParamProps) {
  await mongodbConnect()
  try {
    if (isObjectIdOrHexString(photoId)) {
      const photo = await FileDocument.findById(photoId).exec()
      if (!!photo?._id && photo.mimeType.startsWith('image/')) {
        const fileBuffer = photo.file
        return new NextResponse(fileBuffer, { status: 200, headers: { 'Content-Type': photo.mimeType } })
      }
    }
  } catch (e) {
    console.log(e)
  }
  const base64DefaultImage = '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'
  const img = Buffer.from(base64DefaultImage, 'base64');
  return new NextResponse(img, { status: 200, headers: { 'Content-Type': 'image/png' }})
}